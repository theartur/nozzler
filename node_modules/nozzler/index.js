// Nozzler Core

console.log("\n-- Nozzler --\n");

var pumper = require("pumper");

var core = {
    init: function (url, wallet) {
        this
            .createSession(url, wallet)
            .identifyFrames()

//             .satisfyClaim()
            .clickImHuman()
            .captureChallenge()
            .identifyFrames()
            .solveChallenge()

            .runCasper();
    },
    createSession: function (url, wallet) {
//      - access nozzle
//      - input wallet
//      - identify challenge
//      - capture challenge
//      - save it to show
//      - hang session
//      - wait for solution

        var casper = this.casper = require('casper').create({
            pageSettings: { 
                webSecurityEnabled: false 
            },
            waitTimeout: 60000,
        //     verbose: true,
        //     logLevel: "debug"
        });
        
        casper.start(url, function() {
            pumper.injectWallet.call(this, wallet);
        });
        
        return this;
    },
    identifyFrames: function () {
        var casper = this.casper;
        
        casper.then(function() {
            console.log(">>> FRAMES PRESENT: ");
            console.log(this.page.childFramesCount());
            this.page.childFramesName().forEach(function(n) {
                console.log("> ", n);
            });
        });
        
        return this;
    },
    satisfyClaim: function () {
        var casper = this.casper;
        var last;
        casper.waitFor(function check() {
            var text = this.evaluate(function() {
                return $("form[method='post'] input[type=submit]").val().trim();
            });

            if (last != text) {
                last = text;
                this.echo('SUBMIT: ' + text);
            }

            return text == "Go!";
        });

        return this;
    },
    clickImHuman: function () {
        var casper = this.casper;
        var captcha;
        
        casper.then(function() {
            captcha = this.evaluate(function() {
                var recap = $("iframe[title*='recaptcha']");
                
                var id = "nozz" + Math.random().toString(36).substr(2);
                recap[0].id = id;
                
                var offset = recap.offset();
                var solve = {};
                solve.x = offset.left;
                solve.y = offset.top;
                solve.id = recap[0].id;
                solve.width = recap[0].width;
                solve.height = recap[0].height;

                return JSON.stringify(solve);
            });
        });
                    
        casper.waitUntilVisible("iframe[src*='recaptcha']", function shootRecaptchaTarget() {
            
            this.echo("I'm sure iframe[src*='recaptcha'] is available in the DOM >>> " + captcha);
            this.captureSelector('bluesatoshi-rrecaptcha.png', "iframe[src*='recaptcha']");
            
            var frame = JSON.parse(captcha);
            
            var top = parseInt(frame.y, 10);
            var left = parseInt(frame.x, 10);
            var width = parseInt(frame.width, 10);
            var height = parseInt(frame.height, 10);
            
            var clip = {
                top: top,
                left: left,
                width: width,
                height: height
            };
            
            this.echo("clip: " + JSON.stringify(clip));
            
            this.capture('bluesatoshi--RECAPTCHA.png', clip);
        });
        
        var captchaSolver;
        casper.then(function() {
            var captcha = this.evaluate(function() {
                var recap = $("iframe[title*='recaptcha']");
                var offset = recap.offset();
                var solve = {};
                
                solve.x = offset.left;
                solve.y = offset.top;
                solve.id = recap[0].id;
                solve.width = recap[0].width;
                solve.height = recap[0].height;

                return JSON.stringify(solve);
            });
casper.capture('bluesatoshi-debug.png');
console.log("-->> ", captcha);
            captchaSolver = JSON.parse(captcha);
console.log(captchaSolver);
                this.echo('captchaSolver: ' + captchaSolver);
            
            this.waitUntilVisible("#" + captchaSolver.id, function () {
                this.echo("I'm sure #" + captchaSolver.id + " is available in the DOM");
                this.withFrame("<!--framePath //<!--frame3-->-->", function () {
                    this.click('.recaptcha-checkbox-checkmark');
                });
            });
            
        });

        return this;
    },
    captureChallenge: function () {
        var casper = this.casper;
        casper.wait(5000, function() {
//             casper.captureSelector('bluesatoshi-challenge.png', ".gc-bubbleDefault iframe");
            casper.capture('bluesatoshi-SHOWchallenge.png');
            
            
        });
        
        return this;
    },
    solveChallenge: function () {
        var casper = this.casper;
        casper.then(function(wallet, debugDot) {
            var chooseDial = this.evaluate(function() {
                var recap = $($("iframe")[4]);
                var offset = recap.offset();
                var solve = {};

                solve.x = offset.left;
                solve.y = offset.top;
                solve.width = recap.width();
                solve.height = recap.height();

                return JSON.stringify(solve);
            });
            
            console.log("chooseDial -->> ", chooseDial);
            chooseDial = JSON.parse(chooseDial);

            var top = parseInt(chooseDial.y, 10);
            var left = parseInt(chooseDial.x, 10);
            var width = parseInt(chooseDial.width, 10);
            var height = parseInt(chooseDial.height, 10);

            var clip = {
                top: top,
                left: left,
                width: width,
                height: height
            };
            
            casper.withFrame("<!--framePath //<!--frame4-->-->", function () {

                this.echo("clip chooseDial: " + JSON.stringify(clip));

                this.capture('bluesatoshi--chooseDial.png', clip);
                
                // FROM NOW ON, YOU WILL HANG AND WAIT FOR THE ANSWER YEY!!!
                this.click('.rc-imageselect-target td:nth-child(1)');
            });
        });
        
        return this;
    },
    runCasper: function () {
        var casper = this.casper;
        casper.run(function() {
            // echo results in some pretty fashion
            casper.capture('bluesatoshi-end.png');
            this.echo('ALL DONE :)');
            this.exit();
        });
        
        return this;
    }
};

core.init('http://bluesatoshi.com/', 'ert56ry56435y46te');